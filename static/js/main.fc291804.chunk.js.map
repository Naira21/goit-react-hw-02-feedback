{"version":3,"sources":["components/FeedbackOptions.js","components/Notification.js","components/Statistics.js","components/Section.js","App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","map","option","onClick","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","name","Section","title","children","prototype","PropTypes","string","App","state","counter","type","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","result","percentage","Math","round","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAEO,SAASA,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACzC,OACE,8BACGD,EAAQE,KAAI,SAACC,GACZ,OACE,wBAAqBC,QAAS,kBAAMH,EAAgBE,IAApD,SACGA,GADUA,Q,oBCNR,SAASE,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,kCAAUA,ICAJ,SAASC,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAEA,OACE,+BACE,qBAAIC,KAAK,WAAT,kBAA0BL,KAC1B,qBAAIK,KAAK,cAAT,qBAAgCJ,KAChC,qBAAII,KAAK,UAAT,iBAAwBH,KACxB,wCAAWC,KACX,oDAAuBC,EAAvB,UCfC,SAASE,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAC/B,OACE,gCACE,kCAAKD,KACJC,KFCPX,EAAaY,UAAY,CACvBX,QAASY,IAAUC,QGCd,IAAMC,EAAb,4MACEC,MAAQ,CACNb,KAAM,EACNC,QAAS,EACTC,IAAK,GAJT,EAOEY,QAAU,SAACC,GACT,EAAKC,UAAS,SAACC,GAAD,sBACXF,EAAOE,EAAUF,GAAQ,OAThC,EAaEG,mBAAqB,WACnB,MAA+B,EAAKL,MAEpC,OAFA,EAAQb,KAAR,EAAcC,QAAd,EAAuBC,KAd3B,EAmBEiB,gCAAkC,WAChC,IAAMC,EAAS,EAAKF,qBACdG,EAAgC,IAAlB,EAAKR,MAAMb,KAAcoB,EAC7C,OAAOE,KAAKC,MAAMF,IAtBtB,4CAyBE,WACE,MAA+BG,KAAKX,MAA5Bb,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACfY,EAAYU,KAAZV,QACFX,EAAQqB,KAAKN,qBACbd,EAAqBoB,KAAKL,kCAChC,OACE,gCACE,cAACb,EAAD,CAASC,MAAM,wBAAf,SACE,cAAChB,EAAD,CACEC,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAAiBqB,MAIrB,cAACR,EAAD,CAASC,MAAM,aAAf,SACY,IAATP,GAA0B,IAAZC,GAAyB,IAARC,EAC9B,cAACL,EAAD,CAAcC,QAAQ,sBAEtB,cAACC,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,aAhDlC,GAAyBqB,aAyDVb,IC3Dfc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.fc291804.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\nexport function FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n    <div>\n      {options.map((option) => {\n        return (\n          <button key={option} onClick={() => onLeaveFeedback(option)}>\n            {option}\n          </button>\n        );\n      })}\n    </div>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  onLeaveFeedback: PropTypes.func.isRequired,\n  option: PropTypes.array.isRequired,\n};\n","import PropTypes from \"prop-types\";\nexport default function Notification({ message }) {\n  return <message>{message}</message>;\n}\n\nNotification.prototype = {\n  message: PropTypes.string,\n};\n","import PropTypes from \"prop-types\";\n\nexport default function Statistics({\n  good,\n  neutral,\n  bad,\n  total,\n  positivePercentage,\n}) {\n  return (\n    <ul>\n      <li name=\"goodMark\">Good:{good}</li>\n      <li name=\"neutralMark\">Neutral:{neutral}</li>\n      <li name=\"badMark\">Bad:{bad}</li>\n      <li>Total:{total}</li>\n      <li>Positive feedback:{positivePercentage}%</li>\n    </ul>\n  );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n","export function Section({ title, children }) {\n  return (\n    <div>\n      <p> {title}</p>\n      {children}\n    </div>\n  );\n}\n","import \"./App.css\";\nimport { Component } from \"react\";\nimport { FeedbackOptions } from \"./components/FeedbackOptions\";\nimport Notification from \"./components/Notification\";\nimport Statistics from \"./components/Statistics\";\nimport { Section } from \"./components/Section\";\n\nexport class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  counter = (type) => {\n    this.setState((prevState) => ({\n      [type]: prevState[type] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    const result = good + neutral + bad;\n    return result;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const result = this.countTotalFeedback();\n    const percentage = (this.state.good * 100) / result;\n    return Math.round(percentage);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const { counter } = this;\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedbackPercentage();\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={[\"good\", \"neutral\", \"bad\"]}\n            onLeaveFeedback={counter}\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {good === 0 && neutral === 0 && bad === 0 ? (\n            <Notification message=\"No feedback given\" />\n          ) : (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={positivePercentage}\n            />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}